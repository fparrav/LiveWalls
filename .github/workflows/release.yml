name: 🚀 Release LiveWalls

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

env:
  APP_NAME: "LiveWalls"
  SCHEME_NAME: "LiveWalls"
  
jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: 📋 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj', '**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
          
    - name: 🏗️ Build App
      run: |
        echo "🔨 Building $APP_NAME..."
        xcodebuild \
          -project "$APP_NAME.xcodeproj" \
          -scheme "$SCHEME_NAME" \
          -configuration Release \
          -derivedDataPath ./DerivedData \
          -archivePath "./build/$APP_NAME.xcarchive" \
          archive \
          CODE_SIGN_STYLE=Automatic \
          CODE_SIGN_IDENTITY="Apple Development" \
          DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM_ID }}"
          
    - name: 📦 Export App
      run: |
        echo "📦 Exporting $APP_NAME.app..."
        
        # Create ExportOptions.plist
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>developer-id</string>
            <key>teamID</key>
            <string>${{ secrets.DEVELOPMENT_TEAM_ID }}</string>
            <key>signingStyle</key>
            <string>automatic</string>
        </dict>
        </plist>
        EOF
        
        # Export the archive
        xcodebuild \
          -exportArchive \
          -archivePath "./build/$APP_NAME.xcarchive" \
          -exportPath "./build/export" \
          -exportOptionsPlist ExportOptions.plist
          
    - name: 🔐 Code Sign and Notarize (Optional)
      if: ${{ secrets.APPLE_ID && secrets.APP_PASSWORD }}
      run: |
        echo "🔐 Code signing and notarizing..."
        
        # Code sign the app
        codesign --force --deep --sign "Developer ID Application: ${{ secrets.DEVELOPER_ID_NAME }}" "./build/export/$APP_NAME.app"
        
        # Create zip for notarization
        cd "./build/export"
        zip -r "$APP_NAME.zip" "$APP_NAME.app"
        
        # Submit for notarization
        xcrun notarytool submit "$APP_NAME.zip" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APP_PASSWORD }}" \
          --team-id "${{ secrets.DEVELOPMENT_TEAM_ID }}" \
          --wait
          
        # Staple the notarization ticket
        xcrun stapler staple "$APP_NAME.app"
        
    - name: 💿 Create DMG
      run: |
        echo "💿 Creating DMG..."
        
        # Install create-dmg if not available
        if ! command -v create-dmg &> /dev/null; then
          brew install create-dmg
        fi
        
        # Create DMG
        create-dmg \
          --volname "$APP_NAME" \
          --volicon "./icon_asset/icono-macOS-Default-1024x1024@2x.png" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "$APP_NAME.app" 200 190 \
          --hide-extension "$APP_NAME.app" \
          --app-drop-link 600 185 \
          --background "./scripts/dmg-background.png" \
          "./build/$APP_NAME-${{ github.ref_name }}.dmg" \
          "./build/export/"
          
    - name: 📋 Get Release Info
      id: release_info
      run: |
        VERSION=${{ github.ref_name }}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract changelog for this version if exists
        if [ -f CHANGELOG.md ]; then
          CHANGELOG=$(awk "/^## \[$VERSION\]/,/^## \[/{if(/^## \[/ && !/^## \[$VERSION\]/)exit;print}" CHANGELOG.md | head -n -1)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=🎉 Nueva versión de LiveWalls disponible!" >> $GITHUB_OUTPUT
        fi
        
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: "LiveWalls ${{ steps.release_info.outputs.version }}"
        body: |
          ${{ steps.release_info.outputs.changelog }}
          
          ## 📥 Instalación
          
          1. Descarga el archivo `${{ env.APP_NAME }}-${{ github.ref_name }}.dmg`
          2. Abre el DMG y arrastra LiveWalls a Aplicaciones
          3. ¡Disfruta tus fondos de pantalla dinámicos!
          
          ## 📋 Requisitos
          - macOS 14.0 (Sonoma) o superior
          
          ## 🔒 Seguridad
          Esta aplicación está firmada digitalmente y notarizada por Apple.
          
        files: |
          ./build/${{ env.APP_NAME }}-${{ github.ref_name }}.dmg
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        
    - name: ✅ Success Notification
      run: |
        echo "🎉 Release ${{ github.ref_name }} created successfully!"
        echo "📦 DMG: $APP_NAME-${{ github.ref_name }}.dmg"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
